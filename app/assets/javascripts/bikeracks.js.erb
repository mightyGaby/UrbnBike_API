var map;
var mapBounds;
var geojson;
var markers;
var newMarker;
var downTime;
var upTime;
var clusterGroup;

var locateZoom = 16;

var app = app || {};

$(document).ready(function(){

  //=========================================CREATES MAP
  L.mapbox.accessToken = 'pk.eyJ1IjoiZ2FicmllbGxlaWRhcnVpemZ1bmVzIiwiYSI6IjNjNGQ5MjM3MmMxMGI1YzNlMDJlZDZlYzA3NTc5NTJhIn0.rN0bLsGk3EFALg_1zo09eg';
  map = L.mapbox.map('map', 'mapbox.streets')
      .setView([41.893974, -87.627945], 14);
      map.zoomControl.setPosition('bottomleft');

  console.log("map loaded!")

  getData().done(initializeMarkers);

  map.addEventListener('viewreset', function(){
    console.log("zoom: " + map.getZoom());
    console.log("map move!");

    var mapZoom = map.getZoom();
    map.removeLayer(markers);

    renderMarkers();

  });


  //=========================================LOADS MARKERS FROM DATABASE
  function getData() {
    return $.ajax({
      url: '/api/markers.json',
      type: 'get',
      dataType: 'text',
      success: function(data){
        geojson = $.parseJSON(data);
        console.log("Bikerack geojson data returned!");
      }
    });
  }

  function initializeMarkers() {
    clusterGroup = new L.MarkerClusterGroup({ chunkedLoading: true });

    mapBounds = map.getBounds();
    var inBounds = [];

    L.geoJson({
        type: 'FeatureCollection',
        features: geojson
      })
      .eachLayer(function(layer) {
        clusterGroup.addLayer(layer);
      });

      clusterGroup.eachLayer(function(marker) {
        if (mapBounds.contains(marker.getLatLng())) {
          inBounds.push(marker.feature);
        }
      })

    markers = new L.MarkerClusterGroup({ chunkedLoading: true });

    L.mapbox.featureLayer({
        type: 'FeatureCollection',
        features: inBounds
      })
      .eachLayer(function(layer) {
        markers.addLayer(layer);
      });

    map.addLayer(markers);
  }

  function renderMarkers() {
    var tempLayer = L.mapbox.featureLayer()
    mapBounds = map.getBounds();
    var inBounds = [];

    L.geoJson({
        type: 'FeatureCollection',
        features: geojson
      })
      .eachLayer(function(layer) {
        tempLayer.addLayer(layer);
    });

    tempLayer.eachLayer(function(marker) {
      if (mapBounds.contains(marker.getLatLng())) {
        inBounds.push(marker.feature);
      }
    })

    markers = new L.MarkerClusterGroup({ chunkedLoading: true });

    L.mapbox.featureLayer({
        type: 'FeatureCollection',
        features: inBounds
      })
      .eachLayer(function(layer) {
        markers.addLayer(layer);
      });

    map.addLayer(markers);
  }

  //=========================================ADD MARKER ON CLICK & HOLD
  map.on('mousedown', function mouseState(e) {
    downTime = Date.now()
  });

  map.on('mouseup', function(e){
    upTime = Date.now();
    if (downTime && (downTime+1000) < upTime){

      console.log(downTime)
      console.log(upTime)

      var latlng = e.latlng;
      newLocation(latlng.lng, latlng.lat);
    }
    else{ console.log("click-hold not long enough")}
    downTime = false;
  });

  //=========================================CENTER MAP ON USER LOCATION
  var geolocate = document.getElementById('geolocate');
  if (!navigator.geolocation) {
      alert('Geolocation is not available');
  } else {
      geolocate.onclick = function (e) {
          e.preventDefault();
          e.stopPropagation();
          map.locate();
      };
  }
  map.on('locationfound', function(e) {
      map.fitBounds(e.bounds);

      var searchLocation = ({
          type: 'Feature',
          geometry: {
              type: 'Point',
              coordinates: [e.latlng.lng, e.latlng.lat],
          },
          properties: {
              'title': 'Here I am!',
              'marker-color': '#ff8888',
              'marker-symbol': 'star'
          }
      });

      // map.addLayer(searchLocation);
  });

  // If the user chooses not to allow their location
  // to be shared, display an error message.
  map.on('locationerror', function() {
      alert('Position could not be found');
  });

  //=========================================CENTERS MAP ON LOCATION SEARCH VIA FORM
  $('#search-location').on('click', function(){
    var geocoder = L.mapbox.geocoder('mapbox.places');
    var query = $("#address").val()
    console.log(query)
    geocoder.query(query, showMap);

    function showMap(err, data) {
      var myLocation = ({
          type: 'Feature',
          geometry: {
              type: 'Point',
              coordinates: [data.latlng[1], data.latlng[0]],
          },
          properties: {
              'title': 'Your Search',
              'marker-size': 'large',
              'marker-color': '#66ccff',
              'marker-symbol': 'embassy'
          },
          draggable: true
      });

      if (data.lbounds) {
          map.fitBounds(data.lbounds);
          map.setZoom(locateZoom);
      } else if (data.latlng) {
          map.setView([data.latlng[1], data.latlng[0]], locateZoom);
      }
    }
    myLocation.addTo(map);

  });


  //creates new marker from click
  function newLocation(lng, lat){
    newMarker = L.mapbox.featureLayer({
      type: 'Feature',
      geometry: {
          type: 'Point',
          coordinates: [ lng, lat ]
      },
      properties: {
          'title': '<button id="save-marker"> Save location </button>',
          'marker-size': 'large',
          'marker-color': '#BE9A6B',
          'marker-symbol': 'bicycle',
          'className': 'newMarker'
      },
      draggable: true
    });
    newMarker.addTo(markers);

    $('#save-marker').on('click', function(){
      console.log(downTime);
      console.log(upTime);
      $.ajax({
        url: '/bikeracks',
        type: 'post',
        dataType: 'json',
        data: {
          bikerack: {
            address: "TEST",
            neighborhood: "TEST",
            lat: latlng.lat,
            lng: latlng.lng,
            location: latlng.toString()
          }
        },
        success: function(data) {
          console.log("success!!");
          alert('location saved!');
        }
      });
    });

  };
}); //end of document.ready
